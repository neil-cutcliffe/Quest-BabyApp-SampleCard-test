/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { Button } from '@mui/material';
import StarImage from 'src/assets/images/Card2_star.png';
import { styled } from '@mui/material/styles';
import useCard2 from 'src/components/Card2/useCard2';

const TypeQuest = styled('div')(({ theme }) => ({
  backgroundColor: `rgba(250, 250, 250, 1)`,
  boxShadow: `0px 1px 10px rgba(0, 0, 0, 0.12), 0px 4px 5px rgba(0, 0, 0, 0.14), 0px 2px 4px rgba(0, 0, 0, 0.2)`,
  borderRadius: `8px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  width: '100%',
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  overflow: `hidden`,
  height: 'auto',
}));

const Image1 = styled('div', {
  shouldForwardProp: (prop) => !['props'].includes(prop.toString()),
})(({ props }) => ({
  backgroundPosition: `center`,
  backgroundSize: `cover`,
  backgroundRepeat: `no-repeat`,
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  alignSelf: `stretch`,
  height: `287px`,
  margin: `0px`,
  overflow: `hidden`,
  backgroundImage: props.post.image,
}));

const Content = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px 0px 20px 0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `18px 0px 0px 0px`,
});

const Content1 = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px 20px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const About = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  width: `350px`,
  margin: `0px`,
});

const Label = styled('div')(({ theme }) => ({
  backgroundColor: theme.palette['Info']['Light'],
  borderRadius: `50px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `center`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  height: `32px`,
  margin: `0px`,
}));

const Frame1 = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `center`,
  alignItems: `center`,
  padding: `0px 5px`,
  boxSizing: `border-box`,
  height: `24px`,
  margin: `0px`,
});

const Text = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `center`,
  alignItems: `center`,
  padding: `3px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const Label1 = styled('div')(({ theme }) => ({
  textAlign: `center`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Primary']['Contrast'],
  fontStyle: theme.typography['Components']['Tooltip'].fontStyle,
  fontFamily: theme.typography['Components']['Tooltip'].fontFamily,
  fontWeight: theme.typography['Components']['Tooltip'].fontWeight,
  fontSize: theme.typography['Components']['Tooltip'].fontSize,
  letterSpacing: theme.typography['Components']['Tooltip'].letterSpacing,
  lineHeight: theme.typography['Components']['Tooltip'].lineHeight,
  textDecoration: theme.typography['Components']['Tooltip'].textDecoration,
  textTransform: theme.typography['Components']['Tooltip'].textTransform,
  margin: `0px`,
}));

const SizeDetails = styled('div')(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: `normal`,
  fontFamily: `Heebo`,
  fontWeight: `400`,
  fontSize: `14px`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  textTransform: `none`,
  margin: `0px 0px 0px 10px`,
}));

const Details = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  width: `350px`,
  margin: `14px 0px 0px 0px`,
});

const PropertyTitle = styled('div')(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Primary'],
  fontStyle: `normal`,
  fontFamily: `Heebo`,
  fontWeight: `700`,
  fontSize: `16px`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  textTransform: `none`,
  alignSelf: `stretch`,
  margin: `0px`,
}));

const LowerRow = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `space-between`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `14px 0px 0px 0px`,
});

const LockUp = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const Price = styled('div')(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `700`,
  fontSize: `16px`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  textTransform: `none`,
  margin: `0px`,
}));

const Rating = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `6px 0px 0px 0px`,
});

const Star = styled('img')({
  height: `12.67px`,
  width: `13.33px`,
  margin: `0px`,
});

const Rating1 = styled('div')(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `700`,
  fontSize: `16px`,
  letterSpacing: `0.15000000596046448px`,
  textDecoration: `none`,
  lineHeight: `150%`,
  textTransform: `none`,
  width: `161px`,
  margin: `0px 0px 0px 6px`,
}));

const Button1 = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const ButtonContained = styled(Button)({
  height: `48px`,
  width: `133px`,
  margin: `0px`,
});

function Card2(props) {
  const { fns } = useCard2(props);

  return (
    <TypeQuest className={props.className}>
      <Image1 props={props}></Image1>
      <Content>
        <Content1>
          <About>
            <Label>
              <Frame1>
                <Text>
                  <Label1>{`NEW`}</Label1>
                </Text>
              </Frame1>
            </Label>
            <SizeDetails>{`8 guests â€¢ 4 bedrooms`}</SizeDetails>
          </About>
          <Details>
            <PropertyTitle>{props.post.title}</PropertyTitle>
          </Details>
          <LowerRow>
            <LockUp>
              <Price>{`$1,250 / night`}</Price>
              <Rating>
                <Star src={StarImage} loading="lazy" alt={'star'} />
                <Rating1>{`4.69 (239 reviews)`}</Rating1>
              </Rating>
            </LockUp>
            <Button1>
              <ButtonContained
                variant="contained"
                size="large"
                color="primary"
                onClick={fnsbookNowClicked}
              >
                {' '}
                BOOK NOW{' '}
              </ButtonContained>
            </Button1>
          </LowerRow>
        </Content1>
      </Content>
    </TypeQuest>
  );
}

export default Card2;
